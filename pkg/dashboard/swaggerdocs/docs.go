// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package swaggerdocs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "GitHub Issues",
            "url": "https://github.com/chaos-mesh/chaos-mesh/issues"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/archives": {
            "get": {
                "description": "Get archived chaos experiments.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get archived chaos experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PodChaos",
                            "IOChaos",
                            "NetworkChaos",
                            "TimeChaos",
                            "KernelChaos",
                            "StressChaos"
                        ],
                        "type": "string",
                        "description": "kind",
                        "name": "kind",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/archive.Archive"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived experiment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uids",
                        "name": "uids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/archives/schedules": {
            "get": {
                "description": "Get archived schedule experiments.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get archived schedule experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/archive.Archive"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived schedule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uids",
                        "name": "uids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/archives/schedules/{uid}": {
            "get": {
                "description": "Get the detail of an archived schedule experiment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get the detail of an archived schedule experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/archive.Detail"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived schedule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/archives/workflows": {
            "get": {
                "description": "Get archived workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get archived workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/archive.Archive"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived workflows.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived workflows.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uids",
                        "name": "uids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/archives/workflows/{uid}": {
            "get": {
                "description": "Get the detail of an archived workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get the detail of an archived workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/archive.Detail"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/archives/{uid}": {
            "get": {
                "description": "Get the archived chaos experiment's detail by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Get an archived chaos experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the archive uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/archive.Detail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified archived experiment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archives"
                ],
                "summary": "Delete the specified archived experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/annotations": {
            "get": {
                "description": "Get the annotations of the pods in the specified namespace from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the annotations of the pods in the specified namespace from Kubernetes cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The pod's namespace list, split by ,",
                        "name": "podNamespaceList",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MapSlice"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/chaos-available-namespaces": {
            "get": {
                "description": "Get all namespaces which could inject chaos(explosion scope) from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get all namespaces which could inject chaos(explosion scope) from Kubernetes cluster.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/config": {
            "get": {
                "description": "Get the config of Dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the config of Dashboard.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.ChaosDashboardConfig"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/kinds": {
            "get": {
                "description": "Get all chaos kinds from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get all chaos kinds from Kubernetes cluster.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/labels": {
            "get": {
                "description": "Get the labels of the pods in the specified namespace from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the labels of the pods in the specified namespace from Kubernetes cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The pod's namespace list, split by ,",
                        "name": "podNamespaceList",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MapSlice"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/namespaces": {
            "get": {
                "description": "Get all from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get all namespaces from Kubernetes cluster.",
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/physicalmachine-annotations": {
            "get": {
                "description": "Get the annotations of the physicalMachines in the specified namespace from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the annotations of the physicalMachines in the specified namespace from Kubernetes cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The physicalMachine's namespace list, split by ,",
                        "name": "physicalMachineNamespaceList",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MapSlice"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/physicalmachine-labels": {
            "get": {
                "description": "Get the labels of the physicalMachines in the specified namespace from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the labels of the physicalMachines in the specified namespace from Kubernetes cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The physicalMachine's namespace list, split by ,",
                        "name": "physicalMachineNamespaceList",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MapSlice"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/physicalmachines": {
            "post": {
                "description": "Get physicalMachines from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get physicalMachines from Kubernetes cluster.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.PhysicalMachineSelectorSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/common.PhysicalMachine"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/pods": {
            "post": {
                "description": "Get pods from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get pods from Kubernetes cluster.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/common.Pod"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/common/rbac-config": {
            "get": {
                "description": "Get the rbac config according to the user's choice.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get the rbac config according to the user's choice.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MapSlice"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Get events from db.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "list events.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The create time of events",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The name of the object",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The namespace of the object",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The UID of the object",
                        "name": "object_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PodChaos",
                            "IOChaos",
                            "NetworkChaos",
                            "TimeChaos",
                            "KernelChaos",
                            "StressChaos",
                            "AWSChaos",
                            "GCPChaos",
                            "DNSChaos",
                            "Schedule"
                        ],
                        "type": "string",
                        "description": "kind",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The max length of events list",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Event"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/events/workflow/{uid}": {
            "get": {
                "description": "list all events for Workflow and related WorkflowNode.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "cascadeFetchEventsForWorkflow list all events for Workflow and related WorkflowNode.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The namespace of the object",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The UID of the Workflow",
                        "name": "uid",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "The max length of events list",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Event"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Get the event from db by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get an event.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/experiments": {
            "get": {
                "description": "Get chaos experiments from k8s clusters in real time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "List chaos experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter exps by namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter exps by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PodChaos",
                            "NetworkChaos",
                            "IOChaos",
                            "StressChaos",
                            "KernelChaos",
                            "TimeChaos",
                            "DNSChaos",
                            "AWSChaos",
                            "GCPChaos",
                            "JVMChaos",
                            "HTTPChaos"
                        ],
                        "type": "string",
                        "description": "filter exps by kind",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Injecting",
                            "Running",
                            "Finished",
                            "Paused"
                        ],
                        "type": "string",
                        "description": "filter exps by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/experiment.Experiment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "post": {
                "description": "Pass a JSON object to create a new chaos experiment. The schema for JSON is the same as the YAML schema for the Kubernetes object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Create a new chaos experiment.",
                "parameters": [
                    {
                        "description": "the chaos definition",
                        "name": "chaos",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Batch delete chaos experiments by uids.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Batch delete chaos experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the experiment uids, split with comma. Example: ?uids=uid1,uid2",
                        "name": "uids",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "true",
                            "false"
                        ],
                        "type": "string",
                        "description": "force",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/experiments/pause/{uid}": {
            "put": {
                "description": "Pause a chaos experiment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Pause a chaos experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the experiment uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/experiments/start/{uid}": {
            "put": {
                "description": "Start a chaos experiment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Start a chaos experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the experiment uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/experiments/state": {
            "get": {
                "description": "Get the status of all experiments.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Get the status of all experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/status.AllChaosStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/experiments/{uid}": {
            "get": {
                "description": "Get the chaos experiment's detail by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Get a chaos experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the experiment uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/experiment.Detail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the chaos experiment by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "experiments"
                ],
                "summary": "Delete a chaos experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the experiment uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "true",
                            "false"
                        ],
                        "type": "string",
                        "description": "force",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Get chaos schedules from k8s cluster in real time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "List chaos schedules.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter schedules by namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter schedules by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/schedule.Schedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "post": {
                "description": "Pass a JSON object to create a new schedule. The schema for JSON is the same as the YAML schema for the Kubernetes object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Create a new schedule.",
                "parameters": [
                    {
                        "description": "the schedule definition",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Schedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Batch delete schedules by uids.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Batch delete schedules.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the schedule uids, split with comma. Example: ?uids=uid1,uid2",
                        "name": "uids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/schedules/pause/{uid}": {
            "put": {
                "description": "Pause a schedule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Pause a schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the schedule uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/schedules/start/{uid}": {
            "put": {
                "description": "Start a schedule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Start a schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the schedule uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/schedules/{uid}": {
            "get": {
                "description": "Get the schedule's detail by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Get a schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the schedule uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schedule.Detail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the schedule by uid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Delete a schedule.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the schedule uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "description": "List workflows from Kubernetes cluster.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List workflows from Kubernetes cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace, given empty string means list from all namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Initializing",
                            "Running",
                            "Errored",
                            "Finished"
                        ],
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.WorkflowMeta"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows/new": {
            "post": {
                "description": "Create a new workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Create a new workflow.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Workflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.WorkflowDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows/parse-task/http": {
            "post": {
                "description": "Parse the rendered task back to the original request",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Parse the rendered task back to the original request",
                "parameters": [
                    {
                        "description": "Rendered Task",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/curl.RequestForm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows/render-task/http": {
            "post": {
                "description": "Render a task which sends HTTP request",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Render a task which sends HTTP request",
                "parameters": [
                    {
                        "description": "Origin HTTP Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/curl.RequestForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Template"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows/validate-task/http": {
            "post": {
                "description": "Validate the given template is a valid rendered HTTP Task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Validate the given template is a valid rendered HTTP Task",
                "parameters": [
                    {
                        "description": "Rendered Task",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/workflows/{uid}": {
            "get": {
                "description": "Get detailed information about the specified workflow. If that object is not existed in kubernetes, it will only return ths persisted data in the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Get detailed information about the specified workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.WorkflowDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Update a workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1alpha1.Workflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.WorkflowDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the specified workflow.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Delete the specified workflow.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/workflow.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "archive.Archive": {
            "$ref": "#/definitions/core.ObjectBase"
        },
        "archive.Detail": {
            "type": "object",
            "properties": {
                "kube_object": {
                    "type": "object",
                    "$ref": "#/definitions/core.KubeObjectDesc"
                }
            }
        },
        "common.MapSlice": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "common.PhysicalMachine": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "common.Pod": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "config.ChaosDashboardConfig": {
            "type": "object",
            "properties": {
                "cluster_mode": {
                    "description": "ClusterScoped means control Chaos Object in cluster level(all namespace).",
                    "type": "boolean",
                    "default": true
                },
                "dns_server_create": {
                    "type": "boolean",
                    "default": false
                },
                "enableFilterNamespace": {
                    "description": "EnableFilterNamespace will filter namespace with annotation. Only the pods/containers in namespace\nannotated with ` + "`" + `chaos-mesh.org/inject=enabled` + "`" + ` will be injected.",
                    "type": "boolean",
                    "default": false
                },
                "gcp_security_mode": {
                    "description": "GcpSecurityMode will use the gcloud authentication to login to GKE user",
                    "type": "boolean",
                    "default": false
                },
                "listen_host": {
                    "type": "string",
                    "default": "0.0.0.0"
                },
                "listen_port": {
                    "type": "integer",
                    "default": 2333
                },
                "root_path": {
                    "type": "string",
                    "default": "http://localhost:2333"
                },
                "security_mode": {
                    "description": "SecurityMode will use the token login by the user if set to true",
                    "type": "boolean",
                    "default": true
                },
                "target_namespace": {
                    "description": "TargetNamespace is the target namespace to injecting chaos.\nIt only works with ClusterScoped is false.",
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "core.ConditionalBranch": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            }
        },
        "core.Event": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "object_id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "core.KubeObjectDesc": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/core.KubeObjectMeta"
                },
                "spec": {
                    "type": "object"
                }
            }
        },
        "core.KubeObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "core.Node": {
            "type": "object",
            "properties": {
                "conditional_branches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.ConditionalBranch"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parallel": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.NodeNameWithTemplate"
                    }
                },
                "serial": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.NodeNameWithTemplate"
                    }
                },
                "state": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.NodeNameWithTemplate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            }
        },
        "core.ObjectBase": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.Topology": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Node"
                    }
                }
            }
        },
        "core.WorkflowDetail": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "entry": {
                    "description": "the entry node name",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kube_object": {
                    "type": "object",
                    "$ref": "#/definitions/core.KubeObjectDesc"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "topology": {
                    "type": "object",
                    "$ref": "#/definitions/core.Topology"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "core.WorkflowMeta": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "entry": {
                    "description": "the entry node name",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "curl.Header": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "curl.RequestForm": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "followLocation": {
                    "type": "boolean"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/curl.Header"
                },
                "jsonContent": {
                    "type": "boolean"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "experiment.Detail": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "failed_message": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "kube_object": {
                    "type": "object",
                    "$ref": "#/definitions/core.KubeObjectDesc"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "experiment.Experiment": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "failed_message": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "schedule.Detail": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "experiment_uids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "kube_object": {
                    "type": "object",
                    "$ref": "#/definitions/core.KubeObjectDesc"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "schedule.Schedule": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "status.AllChaosStatus": {
            "type": "object",
            "properties": {
                "finished": {
                    "type": "integer"
                },
                "injecting": {
                    "type": "integer"
                },
                "paused": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                }
            }
        },
        "utils.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "full_text": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.AWSChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific aws chaos action.\nSupported action: ec2-stop / ec2-restart / detach-volume\nDefault action: ec2-stop\n+kubebuilder:validation:Enum=ec2-stop;ec2-restart;detach-volume",
                    "type": "string"
                },
                "awsRegion": {
                    "description": "AWSRegion defines the region of aws.",
                    "type": "string"
                },
                "deviceName": {
                    "description": "DeviceName indicates the name of the device.\nNeeded in detach-volume.\n+optional",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\n+optional",
                    "type": "string"
                },
                "ec2Instance": {
                    "description": "Ec2Instance indicates the ID of the ec2 instance.",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint indicates the endpoint of the aws server. Just used it in test now.\n+optional",
                    "type": "string"
                },
                "secretName": {
                    "description": "SecretName defines the name of kubernetes secret.\n+optional",
                    "type": "string"
                },
                "volumeID": {
                    "description": "EbsVolume indicates the ID of the EBS volume.\nNeeded in detach-volume.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.AttrOverrideSpec": {
            "type": "object",
            "properties": {
                "atime": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.Timespec"
                },
                "blocks": {
                    "description": "+optional",
                    "type": "integer"
                },
                "ctime": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.Timespec"
                },
                "gid": {
                    "description": "+optional",
                    "type": "integer"
                },
                "ino": {
                    "description": "+optional",
                    "type": "integer"
                },
                "kind": {
                    "description": "+optional",
                    "type": "string"
                },
                "mtime": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.Timespec"
                },
                "nlink": {
                    "description": "+optional",
                    "type": "integer"
                },
                "perm": {
                    "description": "+optional",
                    "type": "integer"
                },
                "rdev": {
                    "description": "+optional",
                    "type": "integer"
                },
                "size": {
                    "description": "+optional",
                    "type": "integer"
                },
                "uid": {
                    "description": "+optional",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.BandwidthSpec": {
            "type": "object",
            "properties": {
                "buffer": {
                    "description": "Buffer is the maximum amount of bytes that tokens can be available for instantaneously.\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "limit": {
                    "description": "Limit is the number of bytes that can be queued waiting for tokens to become available.\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "minburst": {
                    "description": "Minburst specifies the size of the peakrate bucket. For perfect\naccuracy, should be set to the MTU of the interface.  If a\npeakrate is needed, but some burstiness is acceptable, this\nsize can be raised. A 3000 byte minburst allows around 3mbit/s\nof peakrate, given 1000 byte packets.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "peakrate": {
                    "description": "Peakrate is the maximum depletion rate of the bucket.\nThe peakrate does not need to be set, it is only necessary\nif perfect millisecond timescale shaping is required.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "rate": {
                    "description": "Rate is the speed knob. Allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.CPUStressor": {
            "type": "object",
            "properties": {
                "load": {
                    "description": "Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100\nis full loading.\n+optional",
                    "type": "integer"
                },
                "options": {
                    "description": "extend stress-ng options\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workers": {
                    "description": "Workers specifies N workers to apply the stressor.\nMaximum 8192 workers can run by stress-ng\n+kubebuilder:validation:Maximum=8192",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.ChaosOnlyScheduleSpec": {
            "type": "object",
            "properties": {
                "awsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.AWSChaosSpec"
                },
                "concurrencyPolicy": {
                    "description": "+optional\n+kubebuilder:validation:Enum=Forbid;Allow",
                    "type": "string"
                },
                "dnsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DNSChaosSpec"
                },
                "ebpfChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.EBPFChaosSpec"
                },
                "gcpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.GCPChaosSpec"
                },
                "historyLimit": {
                    "description": "+optional\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "httpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.HTTPChaosSpec"
                },
                "ioChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.IOChaosSpec"
                },
                "jvmChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMChaosSpec"
                },
                "kernelChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.KernelChaosSpec"
                },
                "networkChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkChaosSpec"
                },
                "physicalmachineChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PhysicalMachineChaosSpec"
                },
                "podChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodChaosSpec"
                },
                "redisChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.RedisChaosSpec"
                },
                "schedule": {
                    "type": "string"
                },
                "startingDeadlineSeconds": {
                    "description": "+optional\n+nullable\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "stressChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.StressChaosSpec"
                },
                "timeChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.TimeChaosSpec"
                },
                "type": {
                    "description": "TODO: use a custom type, as ` + "`" + `TemplateType` + "`" + ` contains other possible values",
                    "type": "string"
                }
            }
        },
        "v1alpha1.ClockSpec": {
            "type": "object",
            "properties": {
                "clock-ids-slice": {
                    "description": "the identifier of the particular clock on which to act.\nMore clock description in linux kernel can be found in man page of clock_getres, clock_gettime, clock_settime.\nMuti clock ids should be split with \",\"",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of target program.",
                    "type": "integer"
                },
                "time-offset": {
                    "description": "specifies the length of time offset.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.ConditionalBranch": {
            "type": "object",
            "properties": {
                "expression": {
                    "description": "Expression is the expression for this conditional branch, expected type of result is boolean. If expression is empty, this branch will always be selected/the template will be spawned.\n+optional",
                    "type": "string"
                },
                "target": {
                    "description": "Target is the name of other template, if expression is evaluated as true, this template will be spawned.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.CorruptSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0"
                },
                "corrupt": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.DNSChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific DNS chaos action.\nSupported action: error, random\nDefault action: error\n+kubebuilder:validation:Enum=error;random",
                    "type": "string"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "patterns": {
                    "description": "Choose which domain names to take effect, support the placeholder ? and wildcard *, or the Specified domain name.\nNote:\n     1. The wildcard * must be at the end of the string. For example, chaos-*.org is invalid.\n     2. if the patterns is empty, will take effect on all the domain names.\nFor example:\n\t\tThe value is [\"google.com\", \"github.*\", \"chaos-mes?.org\"],\n\t\twill take effect on \"google.com\", \"github.com\" and \"chaos-mesh.org\"\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.DelaySpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0"
                },
                "jitter": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0ms"
                },
                "latency": {
                    "type": "string"
                },
                "reorder": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ReorderSpec"
                }
            }
        },
        "v1alpha1.DiskFillSpec": {
            "type": "object",
            "properties": {
                "fill-by-fallocate": {
                    "description": "fill disk by fallocate",
                    "type": "boolean"
                },
                "path": {
                    "description": "specifies the location to fill data in. if path not provided,\npayload will read/write from/into a temp file, temp file will be deleted after writing",
                    "type": "string"
                },
                "size": {
                    "description": "specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000,\nK=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB",
                    "type": "string"
                }
            }
        },
        "v1alpha1.DiskPayloadSpec": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "specifies the location to fill data in. if path not provided,\npayload will read/write from/into a temp file, temp file will be deleted after writing",
                    "type": "string"
                },
                "payload-process-num": {
                    "description": "specifies the number of process work on writing, default 1, only 1-255 is valid value",
                    "type": "integer"
                },
                "size": {
                    "description": "specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000,\nK=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB",
                    "type": "string"
                }
            }
        },
        "v1alpha1.DuplicateSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0"
                },
                "duplicate": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.EBPFChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific pod ebpf action.",
                    "type": "string"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "description": "Data is ELF 64-bit LSB relocatable, eBPF with base64 encode\nuse it should first decode it with base64",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\nIt is required when the action is ` + "`" + `PodFailureAction` + "`" + `.\nA duration string is a possibly signed sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\", \"-1.5h\" or \"2h45m\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.FailKernRequest": {
            "type": "object",
            "properties": {
                "callchain": {
                    "description": "Callchain indicate a special call chain, such as:\n    ext4_mount\n      -\u003e mount_subtree\n         -\u003e ...\n            -\u003e should_failslab\nWith an optional set of predicates and an optional set of\nparameters, which used with predicates. You can read call chan\nand predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples\nto learn more.\nIf no special call chain, just keep Callchain empty, which means it will fail at any call chain\nwith slab alloc (eg: kmalloc).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.Frame"
                    }
                },
                "failtype": {
                    "description": "FailType indicates what to fail, can be set to '0' / '1' / '2'\nIf ` + "`" + `0` + "`" + `, indicates slab to fail (should_failslab)\nIf ` + "`" + `1` + "`" + `, indicates alloc_page to fail (should_fail_alloc_page)\nIf ` + "`" + `2` + "`" + `, indicates bio to fail (should_fail_bio)\nYou can read:\n  1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html\n  2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt\nto learn more\n+kubebuilder:validation:Maximum=2\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "headers": {
                    "description": "Headers indicates the appropriate kernel headers you need.\nEg: \"linux/mmzone.h\", \"linux/blkdev.h\" and so on",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "probability": {
                    "description": "Probability indicates the fails with probability.\nIf you want 1%, please set this field with 1.\n+kubebuilder:validation:Minimum=0\n+kubebuilder:validation:Maximum=100",
                    "type": "integer"
                },
                "times": {
                    "description": "Times indicates the max times of fails.\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.Frame": {
            "type": "object",
            "properties": {
                "funcname": {
                    "description": "Funcname can be find from kernel source or ` + "`" + `/proc/kallsyms` + "`" + `, such as ` + "`" + `ext4_mount` + "`" + `",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is used with predicate, for example, if you want to inject slab error\nin ` + "`" + `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` + "`" + ` with a special\nname ` + "`" + `bananas` + "`" + `, you need to set it to ` + "`" + `struct dentry *parent, const struct qstr *name` + "`" + `\notherwise omit it.",
                    "type": "string"
                },
                "predicate": {
                    "description": "Predicate will access the arguments of this Frame, example with Parameters's, you can\nset it to ` + "`" + `STRNCMP(name-\u003ename, \"bananas\", 8)` + "`" + ` to make inject only with it, or omit it\nto inject for all d_alloc_parallel call chain.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.GCPChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific gcp chaos action.\nSupported action: node-stop / node-reset / disk-loss\nDefault action: node-stop\n+kubebuilder:validation:Enum=node-stop;node-reset;disk-loss",
                    "type": "string"
                },
                "deviceNames": {
                    "description": "The device name of disks to detach.\nNeeded in disk-loss.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\n+optional",
                    "type": "string"
                },
                "instance": {
                    "description": "Instance defines the name of the instance",
                    "type": "string"
                },
                "project": {
                    "description": "Project defines the name of gcp project.",
                    "type": "string"
                },
                "secretName": {
                    "description": "SecretName defines the name of kubernetes secret. It is used for GCP credentials.\n+optional",
                    "type": "string"
                },
                "zone": {
                    "description": "Zone defines the zone of gcp project.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.HTTPChaosSpec": {
            "type": "object",
            "properties": {
                "abort": {
                    "description": "Abort is a rule to abort a http session.\n+optional",
                    "type": "boolean"
                },
                "code": {
                    "description": "Code is a rule to select target by http status code in response.\n+optional",
                    "type": "integer"
                },
                "delay": {
                    "description": "Delay represents the delay of the target request/response.\nA duration string is a possibly unsigned sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\", \"2h45m\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\n+optional",
                    "type": "string"
                },
                "method": {
                    "description": "Method is a rule to select target by http method in request.\n+optional",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "patch": {
                    "description": "Patch is a rule to patch some contents in target.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodHttpChaosPatchActions"
                },
                "path": {
                    "description": "Path is a rule to select target by uri path in http request.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Port represents the target port to be proxy of.",
                    "type": "integer"
                },
                "replace": {
                    "description": "Replace is a rule to replace some contents in target.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodHttpChaosReplaceActions"
                },
                "request_headers": {
                    "description": "RequestHeaders is a rule to select target by http headers in request.\nThe key-value pairs represent header name and header value pairs.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "response_headers": {
                    "description": "ResponseHeaders is a rule to select target by http headers in response.\nThe key-value pairs represent header name and header value pairs.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "target": {
                    "description": "+kubebuilder:validation:Enum=Request;Response\nTarget is the object to be selected and injected.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.IOChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific pod chaos action.\nSupported action: latency / fault / attrOverride / mistake\n+kubebuilder:validation:Enum=latency;fault;attrOverride;mistake",
                    "type": "string"
                },
                "attr": {
                    "description": "Attr defines the overrided attribution\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.AttrOverrideSpec"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "delay": {
                    "description": "Delay defines the value of I/O chaos action delay.\nA delay string is a possibly signed sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\nIt is required when the action is ` + "`" + `PodFailureAction` + "`" + `.\nA duration string is a possibly signed sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\", \"-1.5h\" or \"2h45m\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "errno": {
                    "description": "Errno defines the error code that returned by I/O action.\nrefer to: https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html\n+optional",
                    "type": "integer"
                },
                "methods": {
                    "description": "Methods defines the I/O methods for injecting I/O chaos action.\ndefault: all I/O methods.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mistake": {
                    "description": "Mistake defines what types of incorrectness are injected to IO operations\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.MistakeSpec"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "path": {
                    "description": "Path defines the path of files for injecting I/O chaos action.\n+optional",
                    "type": "string"
                },
                "percent": {
                    "description": "Percent defines the percentage of injection errors and provides a number from 0-100.\ndefault: 100.\n+optional",
                    "type": "integer"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                },
                "volumePath": {
                    "description": "VolumePath represents the mount path of injected volume",
                    "type": "string"
                }
            }
        },
        "v1alpha1.JVMChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific jvm chaos action.\nSupported action: latency;return;exception;stress;gc;ruleData\n+kubebuilder:validation:Enum=latency;return;exception;stress;gc;ruleData",
                    "type": "string"
                },
                "class": {
                    "description": "+optional\nJava class",
                    "type": "string"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cpuCount": {
                    "description": "+optional\nthe CPU core number need to use, only set it when action is stress",
                    "type": "integer"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action\n+optional",
                    "type": "string"
                },
                "exception": {
                    "description": "+optional\nthe exception which needs to throw for action ` + "`" + `exception` + "`" + `",
                    "type": "string"
                },
                "latency": {
                    "description": "+optional\nthe latency duration for action 'latency', unit ms",
                    "type": "integer"
                },
                "memType": {
                    "description": "+optional\nthe memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
                    "type": "string"
                },
                "method": {
                    "description": "+optional\nthe method in Java class",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "name": {
                    "description": "+optional\nbyteman rule name, should be unique, and will use JVMChaos' name if not set",
                    "type": "string"
                },
                "port": {
                    "description": "+optional\nthe port of agent server, default 9277",
                    "type": "integer"
                },
                "ruleData": {
                    "description": "+optional",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "+optional\nthe return value for action 'return'",
                    "type": "string"
                }
            }
        },
        "v1alpha1.JVMExceptionSpec": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Java class",
                    "type": "string"
                },
                "exception": {
                    "description": "the exception which needs to throw for action ` + "`" + `exception` + "`" + `",
                    "type": "string"
                },
                "method": {
                    "description": "the method in Java class",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.JVMGCSpec": {
            "type": "object",
            "properties": {
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.JVMLatencySpec": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Java class",
                    "type": "string"
                },
                "latency": {
                    "description": "the latency duration for action 'latency', unit ms",
                    "type": "integer"
                },
                "method": {
                    "description": "the method in Java class",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.JVMReturnSpec": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Java class",
                    "type": "string"
                },
                "method": {
                    "description": "the method in Java class",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                },
                "value": {
                    "description": "the return value for action 'return'",
                    "type": "string"
                }
            }
        },
        "v1alpha1.JVMRuleDataSpec": {
            "type": "object",
            "properties": {
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                },
                "rule-data": {
                    "description": "RuleData used to save the rule file's data, will use it when recover",
                    "type": "string"
                }
            }
        },
        "v1alpha1.JVMStressSpec": {
            "type": "object",
            "properties": {
                "cpu-count": {
                    "description": "the CPU core number need to use, only set it when action is stress",
                    "type": "integer"
                },
                "mem-type": {
                    "description": "the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
                    "type": "string"
                },
                "pid": {
                    "description": "the pid of Java process which need to attach",
                    "type": "integer"
                },
                "port": {
                    "description": "the port of agent server",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.KernelChaosSpec": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration represents the duration of the chaos action",
                    "type": "string"
                },
                "failKernRequest": {
                    "description": "FailKernRequest defines the request of kernel injection",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.FailKernRequest"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.LabelSelectorRequirements": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/metav1.LabelSelectorRequirement"
            }
        },
        "v1alpha1.LossSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0"
                },
                "loss": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.MemoryStressor": {
            "type": "object",
            "properties": {
                "options": {
                    "description": "extend stress-ng options\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "description": "Size specifies N bytes consumed per vm worker, default is the total available memory.\nOne can specify the size as % of total available memory or in units of B, KB/KiB,\nMB/MiB, GB/GiB, TB/TiB.\n+optional",
                    "type": "string"
                },
                "workers": {
                    "description": "Workers specifies N workers to apply the stressor.\nMaximum 8192 workers can run by stress-ng\n+kubebuilder:validation:Maximum=8192",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.MistakeSpec": {
            "type": "object",
            "properties": {
                "filling": {
                    "description": "Filling determines what is filled in the miskate data.\n+optional\n+kubebuilder:validation:Enum=zero;random",
                    "type": "string"
                },
                "maxLength": {
                    "description": "Max length of each wrong data segment in bytes\n+optional\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "maxOccurrences": {
                    "description": "There will be [1, MaxOccurrences] segments of wrong data.\n+optional\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.NetworkBandwidthSpec": {
            "type": "object",
            "properties": {
                "buffer": {
                    "description": "+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "device": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip-address": {
                    "type": "string"
                },
                "limit": {
                    "description": "+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "minburst": {
                    "type": "integer"
                },
                "peakrate": {
                    "type": "integer"
                },
                "rate": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific network chaos action.\nSupported action: partition, netem, delay, loss, duplicate, corrupt\nDefault action: delay\n+kubebuilder:validation:Enum=netem;delay;loss;duplicate;corrupt;partition;bandwidth",
                    "type": "string"
                },
                "bandwidth": {
                    "description": "Bandwidth represents the detail about bandwidth control action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.BandwidthSpec"
                },
                "corrupt": {
                    "description": "Corrupt represents the detail about corrupt action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.CorruptSpec"
                },
                "delay": {
                    "description": "Delay represents the detail about delay action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DelaySpec"
                },
                "device": {
                    "description": "Device represents the network device to be affected.\n+optional",
                    "type": "string"
                },
                "direction": {
                    "description": "Direction represents the direction, this applies on netem and network partition action\n+optional\n+kubebuilder:validation:Enum=to;from;both;\"\"",
                    "type": "string"
                },
                "duplicate": {
                    "description": "DuplicateSpec represents the detail about loss action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DuplicateSpec"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action",
                    "type": "string"
                },
                "externalTargets": {
                    "description": "ExternalTargets represents network targets outside k8s\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "loss": {
                    "description": "Loss represents the detail about loss action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.LossSpec"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "target": {
                    "description": "Target represents network target, this applies on netem and network partition action\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelector"
                },
                "targetDevice": {
                    "description": "TargetDevice represents the network device to be affected in target scope.\n+optional",
                    "type": "string"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkCorruptSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "correlation is percentage (10 is 10%)",
                    "type": "string"
                },
                "device": {
                    "description": "the network interface to impact",
                    "type": "string"
                },
                "egress-port": {
                    "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                },
                "hostname": {
                    "description": "only impact traffic to these hostnames",
                    "type": "string"
                },
                "ip-address": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                },
                "ip-protocol": {
                    "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
                    "type": "string"
                },
                "percent": {
                    "description": "percentage of packets to corrupt (10 is 10%)",
                    "type": "string"
                },
                "source-port": {
                    "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkDNSSpec": {
            "type": "object",
            "properties": {
                "dns-domain-name": {
                    "description": "map this host to specified IP",
                    "type": "string"
                },
                "dns-ip": {
                    "description": "map specified host to this IP address",
                    "type": "string"
                },
                "dns-server": {
                    "description": "update the DNS server in /etc/resolv.conf with this value",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkDelaySpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "correlation is percentage (10 is 10%)",
                    "type": "string"
                },
                "device": {
                    "description": "the network interface to impact",
                    "type": "string"
                },
                "egress-port": {
                    "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                },
                "hostname": {
                    "description": "only impact traffic to these hostnames",
                    "type": "string"
                },
                "ip-address": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                },
                "ip-protocol": {
                    "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
                    "type": "string"
                },
                "jitter": {
                    "description": "jitter time, time units: ns, us (or µs), ms, s, m, h.",
                    "type": "string"
                },
                "latency": {
                    "description": "delay egress time, time units: ns, us (or µs), ms, s, m, h.",
                    "type": "string"
                },
                "source-port": {
                    "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkDuplicateSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "correlation is percentage (10 is 10%)",
                    "type": "string"
                },
                "device": {
                    "description": "the network interface to impact",
                    "type": "string"
                },
                "egress-port": {
                    "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                },
                "hostname": {
                    "description": "only impact traffic to these hostnames",
                    "type": "string"
                },
                "ip-address": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                },
                "ip-protocol": {
                    "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
                    "type": "string"
                },
                "percent": {
                    "description": "percentage of packets to duplicate (10 is 10%)",
                    "type": "string"
                },
                "source-port": {
                    "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkLossSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "correlation is percentage (10 is 10%)",
                    "type": "string"
                },
                "device": {
                    "description": "the network interface to impact",
                    "type": "string"
                },
                "egress-port": {
                    "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                },
                "hostname": {
                    "description": "only impact traffic to these hostnames",
                    "type": "string"
                },
                "ip-address": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                },
                "ip-protocol": {
                    "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
                    "type": "string"
                },
                "percent": {
                    "description": "percentage of packets to loss (10 is 10%)",
                    "type": "string"
                },
                "source-port": {
                    "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010.\nit can only be used in conjunction with -p tcp or -p udp",
                    "type": "string"
                }
            }
        },
        "v1alpha1.NetworkPartitionSpec": {
            "type": "object",
            "properties": {
                "accept-tcp-flags": {
                    "description": "only the packet which match the tcp flag can be accepted, others will be dropped.\nonly set when the IPProtocol is tcp, used for partition.",
                    "type": "string"
                },
                "device": {
                    "description": "the network interface to impact",
                    "type": "string"
                },
                "direction": {
                    "description": "specifies the partition direction, values can be 'from', 'to'.\n'from' means packets coming from the 'IPAddress' or 'Hostname' and going to your server,\n'to' means packets originating from your server and going to the 'IPAddress' or 'Hostname'.",
                    "type": "string"
                },
                "hostname": {
                    "description": "only impact traffic to these hostnames",
                    "type": "string"
                },
                "ip-address": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                },
                "ip-protocol": {
                    "description": "only impact egress traffic to these IP addresses",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PhysicalMachineChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "the subAction, generate automatically\n+optional",
                    "type": "string"
                },
                "address": {
                    "description": "DEPRECATED: Use Selector instead.\nOnly one of Address and Selector could be specified.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clock": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ClockSpec"
                },
                "disk-fill": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DiskFillSpec"
                },
                "disk-read-payload": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DiskPayloadSpec"
                },
                "disk-write-payload": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DiskPayloadSpec"
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action\n+optional",
                    "type": "string"
                },
                "jvm-exception": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMExceptionSpec"
                },
                "jvm-gc": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMGCSpec"
                },
                "jvm-latency": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMLatencySpec"
                },
                "jvm-return": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMReturnSpec"
                },
                "jvm-rule-data": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMRuleDataSpec"
                },
                "jvm-stress": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMStressSpec"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "network-bandwidth": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkBandwidthSpec"
                },
                "network-corrupt": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkCorruptSpec"
                },
                "network-delay": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkDelaySpec"
                },
                "network-dns": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkDNSSpec"
                },
                "network-duplicate": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkDuplicateSpec"
                },
                "network-loss": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkLossSpec"
                },
                "network-partition": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkPartitionSpec"
                },
                "process": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ProcessSpec"
                },
                "selector": {
                    "description": "Selector is used to select physical machines that are used to inject chaos action.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PhysicalMachineSelectorSpec"
                },
                "stress-cpu": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.StressCPUSpec"
                },
                "stress-mem": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.StressMemorySpec"
                },
                "uid": {
                    "description": "the experiment ID\n+optional",
                    "type": "string"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of physical machines to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PhysicalMachineSelectorSpec": {
            "type": "object",
            "properties": {
                "annotationSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on annotations.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "expressionSelectors": {
                    "description": "a slice of label selector expressions that can be used to select objects.\nA list of selectors based on set-based label expressions.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.LabelSelectorRequirements"
                },
                "fieldSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on fields.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labelSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on labels.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespaces": {
                    "description": "Namespaces is a set of namespace to which objects belong.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "physicalMachines": {
                    "description": "PhysicalMachines is a map of string keys and a set values that used to select physical machines.\nThe key defines the namespace which physical machine belong,\nand each value is a set of physical machine names.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "v1alpha1.PodChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific pod chaos action.\nSupported action: pod-kill / pod-failure / container-kill\nDefault action: pod-kill\n+kubebuilder:validation:Enum=pod-kill;pod-failure;container-kill",
                    "type": "string"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\nIt is required when the action is ` + "`" + `PodFailureAction` + "`" + `.\nA duration string is a possibly signed sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\", \"-1.5h\" or \"2h45m\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "gracePeriod": {
                    "description": "GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted.\nValue must be non-negative integer. The default value is zero that indicates delete immediately.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PodHttpChaosPatchActions": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body is a rule to patch message body of target.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodHttpChaosPatchBodyAction"
                },
                "headers": {
                    "description": "Headers is a rule to append http headers of target.\nFor example: ` + "`" + `[[\"Set-Cookie\", \"\u003cone cookie\u003e\"], [\"Set-Cookie\", \"\u003canother cookie\u003e\"]]` + "`" + `.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "queries": {
                    "description": "Queries is a rule to append uri queries of target(Request only).\nFor example: ` + "`" + `[[\"foo\", \"bar\"], [\"foo\", \"unknown\"]]` + "`" + `.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "v1alpha1.PodHttpChaosPatchBodyAction": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type represents the patch type, only support ` + "`" + `JSON` + "`" + ` as [merge patch json](https://tools.ietf.org/html/rfc7396) currently.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the patch contents.",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PodHttpChaosReplaceActions": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body is a rule to replace http message body in target.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "code": {
                    "description": "Code is a rule to replace http status code in response.\n+optional",
                    "type": "integer"
                },
                "headers": {
                    "description": "Headers is a rule to replace http headers of target.\nThe key-value pairs represent header name and header value pairs.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "description": "Method is a rule to replace http method in request.\n+optional",
                    "type": "string"
                },
                "path": {
                    "description": "Path is rule to to replace uri path in http request.\n+optional",
                    "type": "string"
                },
                "queries": {
                    "description": "Queries is a rule to replace uri queries in http request.\nFor example, with value ` + "`" + `{ \"foo\": \"unknown\" }` + "`" + `, the ` + "`" + `/?foo=bar` + "`" + ` will be altered to ` + "`" + `/?foo=unknown` + "`" + `,\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1alpha1.PodSelector": {
            "type": "object",
            "properties": {
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.PodSelectorSpec": {
            "type": "object",
            "properties": {
                "annotationSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on annotations.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "expressionSelectors": {
                    "description": "a slice of label selector expressions that can be used to select objects.\nA list of selectors based on set-based label expressions.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.LabelSelectorRequirements"
                },
                "fieldSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on fields.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labelSelectors": {
                    "description": "Map of string keys and values that can be used to select objects.\nA selector based on labels.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "namespaces": {
                    "description": "Namespaces is a set of namespace to which objects belong.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nodeSelectors": {
                    "description": "Map of string keys and values that can be used to select nodes.\nSelector which must match a node's labels,\nand objects must belong to these selected nodes.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodes": {
                    "description": "Nodes is a set of node name and objects must belong to these nodes.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "podPhaseSelectors": {
                    "description": "PodPhaseSelectors is a set of condition of a pod at the current time.\nsupported value: Pending / Running / Succeeded / Failed / Unknown\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pods": {
                    "description": "Pods is a map of string keys and a set values that used to select pods.\nThe key defines the namespace which pods belong,\nand the each values is a set of pod names.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "v1alpha1.ProcessSpec": {
            "type": "object",
            "properties": {
                "process": {
                    "description": "the process name or the process ID",
                    "type": "string"
                },
                "signal": {
                    "description": "the signal number to send",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.RedisChaosSpec": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action defines the specific redis chaos action.\nSupported action: redis-drop / redis-delay / redis-empty-query\nDefault action: redis-drop\n+kubebuilder:validation:Enum=redis-drop;redis-delay;redis-empty-query",
                    "type": "string"
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action.\nIt is required when the action is ` + "`" + `PodFailureAction` + "`" + `.\nA duration string is a possibly signed sequence of\ndecimal numbers, each with optional fraction and a unit suffix,\nsuch as \"300ms\", \"-1.5h\" or \"2h45m\".\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n+optional",
                    "type": "string"
                },
                "latency": {
                    "description": "GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted.\nValue must be non-negative integer. The default value is zero that indicates delete immediately.\n+optional",
                    "type": "integer"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.ReorderSpec": {
            "type": "object",
            "properties": {
                "correlation": {
                    "description": "+optional",
                    "type": "string",
                    "default": "0"
                },
                "gap": {
                    "type": "integer"
                },
                "reorder": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.Schedule": {
            "type": "object",
            "properties": {
                "spec": {
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ScheduleSpec"
                },
                "status": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ScheduleStatus"
                }
            }
        },
        "v1alpha1.ScheduleSpec": {
            "type": "object",
            "properties": {
                "awsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.AWSChaosSpec"
                },
                "concurrencyPolicy": {
                    "description": "+optional\n+kubebuilder:validation:Enum=Forbid;Allow",
                    "type": "string"
                },
                "dnsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DNSChaosSpec"
                },
                "ebpfChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.EBPFChaosSpec"
                },
                "gcpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.GCPChaosSpec"
                },
                "historyLimit": {
                    "description": "+optional\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "httpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.HTTPChaosSpec"
                },
                "ioChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.IOChaosSpec"
                },
                "jvmChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMChaosSpec"
                },
                "kernelChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.KernelChaosSpec"
                },
                "networkChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkChaosSpec"
                },
                "physicalmachineChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PhysicalMachineChaosSpec"
                },
                "podChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodChaosSpec"
                },
                "redisChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.RedisChaosSpec"
                },
                "schedule": {
                    "type": "string"
                },
                "startingDeadlineSeconds": {
                    "description": "+optional\n+nullable\n+kubebuilder:validation:Minimum=0\n+kubebuilder:validation:ExclusiveMinimum=true",
                    "type": "integer"
                },
                "stressChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.StressChaosSpec"
                },
                "timeChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.TimeChaosSpec"
                },
                "type": {
                    "description": "TODO: use a custom type, as ` + "`" + `TemplateType` + "`" + ` contains other possible values",
                    "type": "string"
                },
                "workflow": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.WorkflowSpec"
                }
            }
        },
        "v1alpha1.ScheduleStatus": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "+optional",
                    "type": "string"
                },
                "time": {
                    "description": "+optional\n+nullable",
                    "type": "string"
                }
            }
        },
        "v1alpha1.StressCPUSpec": {
            "type": "object",
            "properties": {
                "load": {
                    "description": "specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.",
                    "type": "integer"
                },
                "options": {
                    "description": "extend stress-ng options",
                    "type": "string"
                },
                "workers": {
                    "description": "specifies N workers to apply the stressor.",
                    "type": "integer"
                }
            }
        },
        "v1alpha1.StressChaosSpec": {
            "type": "object",
            "properties": {
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action\n+optional",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "stressngStressors": {
                    "description": "StressngStressors defines plenty of stressors just like ` + "`" + `Stressors` + "`" + ` except that it's an experimental\nfeature and more powerful. You can define stressors in ` + "`" + `stress-ng` + "`" + ` (see also ` + "`" + `man stress-ng` + "`" + `) dialect,\nhowever not all of the supported stressors are well tested. It maybe retired in later releases. You\nshould always use ` + "`" + `Stressors` + "`" + ` to define the stressors and use this only when you want more stressors\nunsupported by ` + "`" + `Stressors` + "`" + `. When both ` + "`" + `StressngStressors` + "`" + ` and ` + "`" + `Stressors` + "`" + ` are defined, ` + "`" + `StressngStressors` + "`" + `\nwins.\n+optional",
                    "type": "string"
                },
                "stressors": {
                    "description": "Stressors defines plenty of stressors supported to stress system components out.\nYou can use one or more of them to make up various kinds of stresses. At least\none of the stressors should be specified.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.Stressors"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.StressMemorySpec": {
            "type": "object",
            "properties": {
                "options": {
                    "description": "extend stress-ng options",
                    "type": "string"
                },
                "size": {
                    "description": "specifies N bytes consumed per vm worker, default is the total available memory.\nOne can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB..",
                    "type": "string"
                }
            }
        },
        "v1alpha1.Stressors": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPUStressor stresses CPU out\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.CPUStressor"
                },
                "memory": {
                    "description": "MemoryStressor stresses virtual memory out\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.MemoryStressor"
                }
            }
        },
        "v1alpha1.Task": {
            "type": "object",
            "properties": {
                "container": {
                    "description": "Container is the main container image to run in the pod",
                    "type": "string"
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a template.\n+patchStrategy=merge\n+patchMergeKey=name",
                    "type": "string"
                }
            }
        },
        "v1alpha1.Template": {
            "type": "object",
            "properties": {
                "awsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.AWSChaosSpec"
                },
                "children": {
                    "description": "Children describes the children steps of serial or parallel node. Only used when Type is TypeSerial or TypeParallel.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditionalBranches": {
                    "description": "ConditionalBranches describes the conditional branches of custom tasks. Only used when Type is TypeTask.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.ConditionalBranch"
                    }
                },
                "deadline": {
                    "description": "+optional",
                    "type": "string"
                },
                "dnsChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.DNSChaosSpec"
                },
                "ebpfChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.EBPFChaosSpec"
                },
                "gcpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.GCPChaosSpec"
                },
                "httpChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.HTTPChaosSpec"
                },
                "ioChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.IOChaosSpec"
                },
                "jvmChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.JVMChaosSpec"
                },
                "kernelChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.KernelChaosSpec"
                },
                "name": {
                    "type": "string"
                },
                "networkChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.NetworkChaosSpec"
                },
                "physicalmachineChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PhysicalMachineChaosSpec"
                },
                "podChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodChaosSpec"
                },
                "redisChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.RedisChaosSpec"
                },
                "schedule": {
                    "description": "Schedule describe the Schedule(describing scheduled chaos) to be injected with chaos nodes. Only used when Type is TypeSchedule.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.ChaosOnlyScheduleSpec"
                },
                "stressChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.StressChaosSpec"
                },
                "task": {
                    "description": "Task describes the behavior of the custom task. Only used when Type is TypeTask.\n+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.Task"
                },
                "templateType": {
                    "type": "string"
                },
                "timeChaos": {
                    "description": "+optional",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.TimeChaosSpec"
                }
            }
        },
        "v1alpha1.TimeChaosSpec": {
            "type": "object",
            "properties": {
                "clockIds": {
                    "description": "ClockIds defines all affected clock id\nAll available options are [\"CLOCK_REALTIME\",\"CLOCK_MONOTONIC\",\"CLOCK_PROCESS_CPUTIME_ID\",\"CLOCK_THREAD_CPUTIME_ID\",\n\"CLOCK_MONOTONIC_RAW\",\"CLOCK_REALTIME_COARSE\",\"CLOCK_MONOTONIC_COARSE\",\"CLOCK_BOOTTIME\",\"CLOCK_REALTIME_ALARM\",\n\"CLOCK_BOOTTIME_ALARM\"]\nDefault value is [\"CLOCK_REALTIME\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "containerNames": {
                    "description": "ContainerNames indicates list of the name of affected container.\nIf not set, all containers will be injected\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration": {
                    "description": "Duration represents the duration of the chaos action",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines the mode to run chaos action.\nSupported mode: one / all / fixed / fixed-percent / random-max-percent\n+kubebuilder:validation:Enum=one;all;fixed;fixed-percent;random-max-percent",
                    "type": "string"
                },
                "selector": {
                    "description": "Selector is used to select pods that are used to inject chaos action.",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.PodSelectorSpec"
                },
                "timeOffset": {
                    "description": "TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as\n\"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
                    "type": "string"
                },
                "value": {
                    "description": "Value is required when the mode is set to ` + "`" + `FixedMode` + "`" + ` / ` + "`" + `FixedPercentMode` + "`" + ` / ` + "`" + `RandomMaxPercentMode` + "`" + `.\nIf ` + "`" + `FixedMode` + "`" + `, provide an integer of pods to do chaos action.\nIf ` + "`" + `FixedPercentMode` + "`" + `, provide a number from 0-100 to specify the percent of pods the server can do chaos action.\nIF ` + "`" + `RandomMaxPercentMode` + "`" + `,  provide a number from 0-100 to specify the max percent of pods to do chaos action\n+optional",
                    "type": "string"
                }
            }
        },
        "v1alpha1.Timespec": {
            "type": "object",
            "properties": {
                "nsec": {
                    "type": "integer"
                },
                "sec": {
                    "type": "integer"
                }
            }
        },
        "v1alpha1.Workflow": {
            "type": "object",
            "properties": {
                "spec": {
                    "description": "Spec defines the behavior of a workflow",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.WorkflowSpec"
                },
                "status": {
                    "description": "+optional\nMost recently observed status of the workflow",
                    "type": "object",
                    "$ref": "#/definitions/v1alpha1.WorkflowStatus"
                }
            }
        },
        "v1alpha1.WorkflowCondition": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "v1alpha1.WorkflowSpec": {
            "type": "object",
            "properties": {
                "entry": {
                    "type": "string"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.Template"
                    }
                }
            }
        },
        "v1alpha1.WorkflowStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Represents the latest available observations of a workflow's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1alpha1.WorkflowCondition"
                    }
                },
                "endTime": {
                    "description": "+optional",
                    "type": "string"
                },
                "entryNode": {
                    "description": "+optional",
                    "type": "string"
                },
                "startTime": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "workflow.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        "",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Chaos Mesh Dashboard API",
	Description: "Swagger for Chaos Mesh Dashboard. If you encounter any problems with API, please click on the issues link below to report.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
